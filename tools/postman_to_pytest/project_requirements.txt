# Postman to Pytest Generator

## Project Purpose
Create a tool that generates pytest files for Postman collection endpoints, maintaining proper test ordering based on variable dependencies.

## Core Requirements

1. Input Processing
   - Parse dependency YAML files (output from postman_dependency_graph)
   - Handle endpoint selection via CLI
   - Support folder exclusion options
   - Process variable dependencies

2. Test Generation
   - Create pytest files with proper test ordering
   - Generate fixtures for shared variables
   - Handle environment variables
   - Support dynamic data dependencies
   - Maintain proper test isolation

3. Variable Management
   - Generate fixtures for variables set by dependencies
   - Handle different variable types:
     * Dynamic variables from other endpoints
     * Environment variables
     * Static variables
   - Support variable scoping
   - Clean up variables after tests

4. Test Structure
   - Generate setup fixtures
   - Create test functions
   - Handle dependencies through fixture dependencies
   - Support test parameterization
   - Include proper assertions
   - Add docstrings and comments

## Technical Requirements

1. Input Requirements
   - YAML dependency file path
   - Target endpoint
   - Optional folder exclusions
   - Output directory specification

2. Output Structure
   - Generated test file per endpoint
   - Shared fixtures file
   - Common utilities
   - Configuration files

3. Code Organization
   - Modular design
   - Clear separation of concerns:
     * CLI handling
     * Dependency analysis
     * Test generation
## Technical Requirements
1. Python Dependencies
   - Python 3.8+
   - pytest
   - requests (for HTTP calls)
   - json (for parsing Postman collections)
   - typing (for type hints)
   - pydantic (for JSON validation)

2. Code Structure
   - Modular design with separate concerns
   - Clear class/function documentation
   - Type hints for better code clarity
   - Error handling for invalid inputs
   - Logging for operation tracking
   - Proxy configuration management

3. Output Format
   - Generate valid pytest files
   - Create one test file per Postman collection
   - Directory structure should mirror API URL paths (e.g., /api/v1/users -> tests/api/v1/users/test_users.py)
   - Include necessary pytest fixtures
   - Generate requirements.txt for dependencies

## Testing Requirements
1. Unit Tests
   - Test JSON parsing functionality
   - Test conversion logic
   - Test fixture generation
   - Test error handling

2. Integration Tests
   - End-to-end conversion tests
   - Generated test execution validation
   - Different Postman collection versions testing

## Usage Requirements
1. Command Line Interface
   - Accept input file path argument
   - Accept output directory argument
   - Support optional configuration file
   - Provide help and version information

2. Error Handling
   - Clear error messages for invalid JSON
   - Validation errors for unsupported features
   - Path and permission error handling

## Documentation Requirements
1. README.md
   - Installation instructions
   - Usage examples
   - Configuration options
   - Common troubleshooting

2. Code Documentation
   - Function/class docstrings
   - Type hints
   - Inline comments for complex logic

## Environment Configuration
1. Environment Variables (.env)
   - Authentication credentials (Basic, Bearer/API Key)
   - Proxy configuration and authentication
   - SSL/Certificate settings
   - Environment selection and base URLs
   - Test data configuration (path, format, timeout)
   - Logging settings (level, file, format)

## Future Considerations
1. Support for Postman scripts (pre-request and tests)
2. GUI interface for file selection
3. Batch processing of multiple collections
4. Custom template support for generated tests
