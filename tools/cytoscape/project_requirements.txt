# ReactFlow Node Graph Web App Requirements

## Core Features
1. Create a React web application using Vite as the build tool
2. Implement ReactFlow for node graph visualization
3. Create a left panel for graph selection
4. Support three different node graphs
5. Persist viewport state for each graph
6. Scope viewports to their respective graphs

## Technical Requirements
1. Project Setup
   - Use React 18+
   - Use ReactFlow latest version
   - Use Vite for development and building
   - Implement proper project structure (components, hooks, etc.)

2. Layout Requirements
   - Left panel for graph selection
   - Main area for ReactFlow graph display
   - Responsive design

3. Graph Requirements
   - Support three distinct node graphs
   - Each graph should have unique nodes and edges
   - Implement proper node and edge styling
   - Support basic interactions (pan, zoom, drag)

4. State Management
   - Persist viewport state for each graph
   - Maintain separate viewport settings per graph
   - Handle graph switching without losing state

5. Data Structure
   - Define clear node and edge data structures
   - Implement sample data for three different graphs
   - Support proper data organization and separation

## Implementation Details
1. Components
   - App (main container)
   - LeftPanel (graph selection)
   - GraphDisplay (ReactFlow container)
   - Custom nodes (if needed)

2. Features
   - Graph switching functionality
   - Viewport persistence
   - Proper error handling
   - Loading states

3. Data
   - Sample graphs data
   - Viewport state storage
   - Graph selection state

## Future Enhancements (Optional)
1. Add graph editing capabilities
2. Support for custom node types
3. Export/Import functionality
4. Additional graph layouts
