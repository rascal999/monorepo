server {
    listen 8888;
    server_name localhost;

    # Block IPs
    if ($blocked) {
        return 403 "IP blocked\n";
    }

    # Root location
    location / {
        # Run request classification
        access_by_lua_block {
            ngx.log(ngx.ERR, "=== Processing request from ", ngx.var.remote_addr, " ===")
            
            -- Skip static files and health checks
            if string.match(ngx.var.uri, "%.%w+$") or ngx.var.uri == "/health" then
                ngx.log(ngx.ERR, "Skipping static file or health check")
                return
            end
            
            -- Build raw request
            local raw_request = string.format("%s %s HTTP/1.1\n", ngx.req.get_method(), ngx.var.uri)
            
            -- Add headers
            local headers = ngx.req.get_headers()
            for k, v in pairs(headers) do
                raw_request = raw_request .. string.format("%s: %s\n", k, v)
            end
            
            -- Add body if present
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            if body then
                raw_request = raw_request .. "\n" .. body
            end
            
            ngx.log(ngx.ERR, "Raw request:\n", raw_request)
            
            -- Call Ollama using direct HTTP request
            local cjson = require "cjson"
            local http = require "resty.http"
            local httpc = http.new()
            
            local res, err = httpc:request_uri("http://192.168.0.100:11343/api/generate", {
                method = "POST",
                headers = {
                    ["Content-Type"] = "application/json"
                },
                body = cjson.encode({
                    model = "qwen2.5:7b-instruct",
                    prompt = string.format([[Analyze this HTTP request and determine if it's suspicious or malicious:

%s

Respond with either 'suspicious' or 'normal' based on:
1. If it's trying to access admin/system paths
2. If it contains SQL injection attempts
3. If it has suspicious headers or payloads
4. If it's probing for vulnerabilities
5. If it's attempting to exploit common web vulnerabilities

Response:]], raw_request)
                })
            })
            
            if res then
                local success, result = pcall(cjson.decode, res.body)
                if success and result.response then
                    ngx.log(ngx.ERR, "Ollama response: ", result.response)
                    if string.find(string.lower(result.response), "suspicious") then
                        ngx.log(ngx.ERR, "Request classified as suspicious")
                        -- Block IP
                        local f = io.open("/etc/nginx/blocked_ips.conf", "a")
                        if f then
                            f:write(string.format("%s 1;\n", ngx.var.remote_addr))
                            f:close()
                            os.execute("nginx -s reload")
                        end
                    end
                else
                    ngx.log(ngx.ERR, "Failed to parse Ollama response: ", res.body)
                end
            else
                ngx.log(ngx.ERR, "Failed to call Ollama: ", err)
            end
        }

        # Request body processing
        client_max_body_size 1m;
        client_body_buffer_size 1m;
        
        # Proxy headers
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Proxy to Juice Shop
        proxy_pass http://juice-shop:3000;
        proxy_redirect off;
        proxy_buffering off;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 'healthy\n';
        add_header Content-Type text/plain;
    }

    # Static files location
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|woff|woff2|ttf|eot|svg)$ {
        access_log off;
        proxy_pass http://juice-shop:3000;
        proxy_cache_bypass $http_upgrade;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # WebSocket support for socket.io
    location /socket.io/ {
        access_log off;
        proxy_pass http://juice-shop:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}