#!/usr/bin/env bash

# Directory containing WireGuard profiles
PROFILE_DIR="/home/user/share/Data/vpn"

# Function to add iptables rules to allow localhost and Docker traffic
add_local_network_rules() {
  echo "Adding rules to allow localhost and Docker traffic..."
  
  # Allow localhost (127.0.0.0/8)
  sudo iptables -I OUTPUT -d 127.0.0.0/8 -j ACCEPT
  
  # Allow Docker networks (172.16.0.0/12)
  sudo iptables -I OUTPUT -d 172.16.0.0/12 -j ACCEPT
  
  # Allow local networks (192.168.0.0/16) - this is already allowed in the WireGuard config
  # but we add it here for completeness
  sudo iptables -I OUTPUT -d 192.168.0.0/16 -j ACCEPT
}

# Function to start a profile
start_profile() {
  local country_code=$1
  # Modified to only select .conf files, not backups
  local profiles=($(ls $PROFILE_DIR | grep "^${country_code}-" | grep "\.conf$" | grep -v "\.bak"))

  if [ ${#profiles[@]} -eq 0 ]; then
    echo "No profiles found for country code: $country_code"
    exit 1
  fi

  local random_profile=${profiles[$RANDOM % ${#profiles[@]}]}
  local profile_path="$PROFILE_DIR/$random_profile"

  echo "Starting profile: $random_profile"
  sudo wg-quick up $profile_path
  
  # Add rules to allow localhost and Docker traffic after VPN is up
  add_local_network_rules
}

# Function to stop the active profile
stop_profile() {
  local active_interface=$(ip link show | grep -oP '^[0-9]+: \K(gb-[^:@]+)(?=:)')

  if [ -z "$active_interface" ]; then
    echo "No active WireGuard interface found"
    exit 1
  fi

  echo "Stopping interface: $active_interface"
  local config_file="$PROFILE_DIR/${active_interface}.conf"
  if [ ! -f "$config_file" ]; then
    echo "Configuration file not found: $config_file"
    exit 1
  fi
  sudo wg-quick down $config_file
}

# Function to check the status of the VPN
check_status() {
  local active_interface=$(ip link show | grep -oP '^[0-9]+: \K(gb-[^:@]+)(?=:)')

  if [ -z "$active_interface" ]; then
    echo '{"icon": "", "state": "Warning", "text": "VPN off", "short_text": "VPN off"}'
  else
    echo '{"icon": "", "state": "Info", "text": "VPN on", "short_text": "VPN on"}'
  fi
}

# Function to toggle the VPN status
toggle_vpn() {
  local active_interface=$(ip link show | grep -oP '^[0-9]+: \K(gb-[^:@]+)(?=:)')

  if [ -z "$active_interface" ]; then
    start_profile "gb"
    sleep 1  # Give the interface time to come up
  else
    stop_profile
    sleep 1  # Give the interface time to go down
  fi
  # Output the new status immediately for i3status-rs
  check_status
}

# Main script logic
case $1 in
  up)
    if [ -z "$2" ]; then
      start_profile "gb"
    else
      start_profile "$2"
    fi
    ;;
  down)
    stop_profile
    ;;
  status)
    check_status
    ;;
  toggle)
    toggle_vpn
    ;;
  fix-local)
    # Add a new command to just apply the fix without restarting the VPN
    add_local_network_rules
    ;;
  *)
    echo "Usage: mvpn {up [country code] | down | status | toggle | fix-local}"
    exit 1
    ;;
esac